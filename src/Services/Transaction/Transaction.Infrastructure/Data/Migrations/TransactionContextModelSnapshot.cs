// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transaction.Infrastructure.Data;

namespace Transaction.Infrastructure.Data.Migrations
{
    [DbContext(typeof(TransactionContext))]
    partial class TransactionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Transaction.Domain.Entities.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectReceiving", b =>
                {
                    b.Property<Guid>("ObjectReceivingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GiverLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<float?>("HourlyCharge")
                        .HasColumnType("real");

                    b.Property<Guid>("ObjectRegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReceivedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecipientLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ObjectReceivingId");

                    b.HasIndex("GiverLoginId");

                    b.HasIndex("ObjectRegistrationId")
                        .IsUnique();

                    b.HasIndex("RecipientLoginId");

                    b.ToTable("ObjectReceivings");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectRegistration", b =>
                {
                    b.Property<Guid>("ObjectRegistrationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("RecipientLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RegisteredAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ShouldReturnItAfter")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("ObjectRegistrationId");

                    b.HasIndex("ObjectId");

                    b.HasIndex("RecipientLoginId");

                    b.ToTable("ObjectRegistrations");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectReturning", b =>
                {
                    b.Property<Guid>("ObjectReturningId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoaneeLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LoanerLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ObjectReceivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnedAtUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("ObjectReturningId");

                    b.HasIndex("LoaneeLoginId");

                    b.HasIndex("LoanerLoginId");

                    b.HasIndex("ObjectReceivingId")
                        .IsUnique();

                    b.ToTable("ObjectReturnings");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.OfferedObject", b =>
                {
                    b.Property<int>("OfferedObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float?>("HourlyCharge")
                        .HasColumnType("real");

                    b.Property<int>("OriginalObjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("ShouldReturn")
                        .HasColumnType("bit");

                    b.HasKey("OfferedObjectId");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("OfferedObject");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.TransactionToken", b =>
                {
                    b.Property<Guid>("TransactionTokenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("IssuedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IssuerLoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReceivingId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RegistrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UseAfterUtc")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("UseBeforeUtc")
                        .HasColumnType("datetime2");

                    b.HasKey("TransactionTokenId");

                    b.HasIndex("IssuerLoginId");

                    b.HasIndex("ReceivingId");

                    b.HasIndex("RegistrationId");

                    b.ToTable("TransactionToken");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Transaction.Domain.Entities.Login", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectReceiving", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.Login", "GiverLogin")
                        .WithMany("ObjectReceivingGivers")
                        .HasForeignKey("GiverLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.ObjectRegistration", "ObjectRegistration")
                        .WithOne("ObjectReceiving")
                        .HasForeignKey("Transaction.Domain.Entities.ObjectReceiving", "ObjectRegistrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.Login", "RecipientLogin")
                        .WithMany("ObjectReceivingRecepiants")
                        .HasForeignKey("RecipientLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectRegistration", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.OfferedObject", "Object")
                        .WithMany("Registrations")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.Login", "RecipientLogin")
                        .WithMany("RegistrationRecepiants")
                        .HasForeignKey("RecipientLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.Entities.ObjectReturning", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.Login", "LoaneeLogin")
                        .WithMany("ObjectReturningLoanees")
                        .HasForeignKey("LoaneeLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.Login", "LoanerLogin")
                        .WithMany("ObjectReturningLoaners")
                        .HasForeignKey("LoanerLoginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.ObjectReceiving", "ObjectReceiving")
                        .WithOne("ObjectReturning")
                        .HasForeignKey("Transaction.Domain.Entities.ObjectReturning", "ObjectReceivingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.Entities.OfferedObject", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.User", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Transaction.Domain.Entities.TransactionToken", b =>
                {
                    b.HasOne("Transaction.Domain.Entities.Login", "IssuerLogin")
                        .WithMany("IssuedTokens")
                        .HasForeignKey("IssuerLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Transaction.Domain.Entities.ObjectReceiving", "Receiving")
                        .WithMany("Tokens")
                        .HasForeignKey("ReceivingId");

                    b.HasOne("Transaction.Domain.Entities.ObjectRegistration", "Registration")
                        .WithMany("Tokens")
                        .HasForeignKey("RegistrationId");
                });
#pragma warning restore 612, 618
        }
    }
}
