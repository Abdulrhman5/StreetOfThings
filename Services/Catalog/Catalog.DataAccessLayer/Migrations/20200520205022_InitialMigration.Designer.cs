// <auto-generated />
using System;
using Catalog.DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Catalog.DataAccessLayer.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20200520205022_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Catalog.Models.Login", b =>
                {
                    b.Property<Guid>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TokenId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginId");

                    b.HasIndex("UserId");

                    b.ToTable("Logins");
                });

            modelBuilder.Entity("Catalog.Models.ObjectLoan", b =>
                {
                    b.Property<Guid>("ObjectLoanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LoanEndAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoanedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LoginId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ObjectLoanPropertiesObjectId")
                        .HasColumnType("int");

                    b.Property<float?>("Rating")
                        .HasColumnType("real");

                    b.HasKey("ObjectLoanId");

                    b.HasIndex("LoginId");

                    b.HasIndex("ObjectLoanPropertiesObjectId");

                    b.ToTable("ObjectLoans");
                });

            modelBuilder.Entity("Catalog.Models.ObjectLoanProperties", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.HasKey("ObjectId");

                    b.ToTable("ObjectsLoanProperties");
                });

            modelBuilder.Entity("Catalog.Models.ObjectTag", b =>
                {
                    b.Property<int>("ObjectId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("ObjectId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ObjectTags");
                });

            modelBuilder.Entity("Catalog.Models.OfferedObject", b =>
                {
                    b.Property<int>("OfferedObjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndsAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLending")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PublishedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("OfferedObjectId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Objects");
                });

            modelBuilder.Entity("Catalog.Models.Tag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TagId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Catalog.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OriginalUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Catalog.Models.Login", b =>
                {
                    b.HasOne("Catalog.Models.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Models.ObjectLoan", b =>
                {
                    b.HasOne("Catalog.Models.Login", "Login")
                        .WithMany("Loans")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Models.ObjectLoanProperties", "ObjectLoanProperties")
                        .WithMany("ObjectLoans")
                        .HasForeignKey("ObjectLoanPropertiesObjectId");
                });

            modelBuilder.Entity("Catalog.Models.ObjectLoanProperties", b =>
                {
                    b.HasOne("Catalog.Models.OfferedObject", "Object")
                        .WithOne("ObjectLoanProperties")
                        .HasForeignKey("Catalog.Models.ObjectLoanProperties", "ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Models.ObjectTag", b =>
                {
                    b.HasOne("Catalog.Models.OfferedObject", "Object")
                        .WithMany("Tags")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Catalog.Models.Tag", "Tag")
                        .WithMany("Objects")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Catalog.Models.OfferedObject", b =>
                {
                    b.HasOne("Catalog.Models.User", "Owner")
                        .WithMany("OfferedObjects")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
